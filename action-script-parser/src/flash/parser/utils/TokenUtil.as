package flash.parser.utils {
    import flash.parser.types.KeywordType;
    import flash.parser.types.OperatorType;
    import flash.parser.types.SymbolType;
    import flash.parser.types.TokenType;

    public final class TokenUtil {
        public static const KEYWORDS_MAPPING:Object = {
            ('' + KeywordType.IMPORT):                          TokenType.IMPORT,
            ('' + KeywordType.INCLUDE):                         TokenType.INCLUDE,
            ('' + KeywordType.USE):                             TokenType.USE,
            ('' + KeywordType.PACKAGE):                         TokenType.PACKAGE,
            ('' + KeywordType.CLASS):                           TokenType.CLASS,
            ('' + KeywordType.INTERFACE):                       TokenType.INTERFACE,
            ('' + KeywordType.IMPLEMENTS):                      TokenType.IMPLEMENTS,
            ('' + KeywordType.EXTENDS):                         TokenType.EXTENDS,
            ('' + KeywordType.NAMESPACE):                       TokenType.NAMESPACE,
            ('' + KeywordType.CONST):                           TokenType.CONST,
            ('' + KeywordType.VAR):                             TokenType.VAR,
            ('' + KeywordType.FUNCTION):                        TokenType.FUNCTION,
            ('' + KeywordType.GET):                             TokenType.GET,
            ('' + KeywordType.SET):                             TokenType.SET,
            ('' + KeywordType.NATIVE):                          TokenType.NATIVE,
            ('' + KeywordType.INTERNAL):                        TokenType.INTERNAL,
            ('' + KeywordType.PRIVATE):                         TokenType.PRIVATE,
            ('' + KeywordType.PROTECTED):                       TokenType.PROTECTED,
            ('' + KeywordType.PUBLIC):                          TokenType.PUBLIC,
            ('' + KeywordType.DYNAMIC):                         TokenType.DYNAMIC,
            ('' + KeywordType.FINAL):                           TokenType.FINAL,
            ('' + KeywordType.OVERRIDE):                        TokenType.OVERRIDE,
            ('' + KeywordType.STATIC):                          TokenType.STATIC,
            ('' + KeywordType.SWITCH):                          TokenType.SWITCH,
            ('' + KeywordType.CASE):                            TokenType.CASE,
            ('' + KeywordType.CONTINUE):                        TokenType.CONTINUE,
            ('' + KeywordType.BREAK):                           TokenType.BREAK,
            ('' + KeywordType.DEFAULT):                         TokenType.DEFAULT,
            ('' + KeywordType.DO):                              TokenType.DO,
            ('' + KeywordType.WHILE):                           TokenType.WHILE,
            ('' + KeywordType.FOR):                             TokenType.FOR,
            ('' + KeywordType.EACH):                            TokenType.EACH,
            ('' + KeywordType.IF):                              TokenType.IF,
            ('' + KeywordType.ELSE):                            TokenType.ELSE,
            ('' + KeywordType.WITH):                            TokenType.WITH,
            ('' + KeywordType.RETURN):                          TokenType.RETURN,
            ('' + KeywordType.TRY):                             TokenType.TRY,
            ('' + KeywordType.CATCH):                           TokenType.CATCH,
            ('' + KeywordType.FINALLY):                         TokenType.FINALLY,
            ('' + KeywordType.THROW):                           TokenType.THROW,
            ('' + KeywordType.SUPER):                           TokenType.SUPER,
            ('' + KeywordType.THIS):                            TokenType.THIS,
            ('' + KeywordType.VOID):                            TokenType.VOID
        };
        public static const OPERATORS_MAPPING:Object = {
            ('' + OperatorType.PROPERTY_ACCESS):                TokenType.PROPERTY_ACCESS,
            ('' + OperatorType.REST_PROPERTY_ACCESS):           TokenType.REST_PROPERTY_ACCESS,
            ('' + OperatorType.NAME_QUALIFIER):                 TokenType.NAME_QUALIFIER,
            ('' + OperatorType.DESCENDANT_ACCESSOR):            TokenType.DESCENDANT_ACCESSOR,
            ('' + OperatorType.ATTRIBUTE_ACCESSOR):             TokenType.ATTRIBUTE_ACCESSOR,
            ('' + OperatorType.INCREMENT):                      TokenType.INCREMENT,
            ('' + OperatorType.DECREMENT):                      TokenType.DECREMENT,
            ('' + OperatorType.ADDITION):                       TokenType.ADDITION,
            ('' + OperatorType.ADDITION_ASSIGNMENT):            TokenType.ADDITION_ASSIGNMENT,
            ('' + OperatorType.SUBTRACTION):                    TokenType.SUBTRACTION,
            ('' + OperatorType.SUBTRACTION_ASSIGNMENT):         TokenType.SUBTRACTION_ASSIGNMENT,
            ('' + OperatorType.MULTIPLICATION):                 TokenType.MULTIPLICATION,
            ('' + OperatorType.MULTIPLICATION_ASSIGNMENT):      TokenType.MULTIPLICATION_ASSIGNMENT,
            ('' + OperatorType.DIVISION):                       TokenType.DIVISION,
            ('' + OperatorType.DIVISION_ASSIGNMENT):            TokenType.DIVISION_ASSIGNMENT,
            ('' + OperatorType.MODULO):                         TokenType.MODULO,
            ('' + OperatorType.MODULO_ASSIGNMENT):              TokenType.MODULO_ASSIGNMENT,
            ('' + OperatorType.ASSIGNMENT):                     TokenType.ASSIGNMENT,
            ('' + OperatorType.EQUALITY):                       TokenType.EQUALITY,
            ('' + OperatorType.STRICT_EQUALITY):                TokenType.STRICT_EQUALITY,
            ('' + OperatorType.INEQUALITY):                     TokenType.INEQUALITY,
            ('' + OperatorType.STRICT_INEQUALITY):              TokenType.STRICT_INEQUALITY,
            ('' + OperatorType.GREATER_THAN):                   TokenType.GREATER_THAN,
            ('' + OperatorType.GREATER_THAN_EQUALS):            TokenType.GREATER_THAN_EQUALS,
            ('' + OperatorType.LESS_THAN):                      TokenType.LESS_THAN,
            ('' + OperatorType.LESS_THAN_EQUALS):               TokenType.LESS_THAN_EQUALS,
            ('' + OperatorType.LOGICAL_AND):                    TokenType.LOGICAL_AND,
            ('' + OperatorType.LOGICAL_AND_ASSIGNMENT):         TokenType.LOGICAL_AND_ASSIGNMENT,
            ('' + OperatorType.LOGICAL_OR):                     TokenType.LOGICAL_OR,
            ('' + OperatorType.LOGICAL_OR_ASSIGNMENT):          TokenType.LOGICAL_OR_ASSIGNMENT,
            ('' + OperatorType.LOGICAL_NOT):                    TokenType.LOGICAL_NOT,
            ('' + OperatorType.TERNARY_CONDITION):              TokenType.TERNARY_CONDITION,
            ('' + OperatorType.BITWISE_AND):                    TokenType.BITWISE_AND,
            ('' + OperatorType.BITWISE_AND_ASSIGNMENT):         TokenType.BITWISE_AND_ASSIGNMENT,
            ('' + OperatorType.BITWISE_OR):                     TokenType.BITWISE_OR,
            ('' + OperatorType.BITWISE_OR_ASSIGNMENT):          TokenType.BITWISE_OR_ASSIGNMENT,
            ('' + OperatorType.BITWISE_XOR):                    TokenType.BITWISE_XOR,
            ('' + OperatorType.BITWISE_XOR_ASSIGNMENT):         TokenType.BITWISE_XOR_ASSIGNMENT,
            ('' + OperatorType.BITWISE_LT_SHIFT):               TokenType.BITWISE_LT_SHIFT,
            ('' + OperatorType.BITWISE_LT_SHIFT_ASSIGNMENT):    TokenType.BITWISE_LT_SHIFT_ASSIGNMENT,
            ('' + OperatorType.BITWISE_RT_SHIFT):               TokenType.BITWISE_RT_SHIFT,
            ('' + OperatorType.BITWISE_RT_SHIFT_ASSIGNMENT):    TokenType.BITWISE_RT_SHIFT_ASSIGNMENT,
            ('' + OperatorType.BITWISE_US_RT_SHIFT):            TokenType.BITWISE_US_RT_SHIFT,
            ('' + OperatorType.BITWISE_US_RT_SHIFT_ASSIGNMENT): TokenType.BITWISE_US_RT_SHIFT_ASSIGNMENT,
            ('' + OperatorType.BITWISE_NOT):                    TokenType.BITWISE_NOT,
            ('' + OperatorType.KEYWORD_AS):                     TokenType.AS,
            ('' + OperatorType.KEYWORD_IS):                     TokenType.IS,
            ('' + OperatorType.KEYWORD_INSTANCEOF):             TokenType.INSTANCEOF,
            ('' + OperatorType.KEYWORD_TYPEOF):                 TokenType.TYPEOF,
            ('' + OperatorType.KEYWORD_NEW):                    TokenType.NEW,
            ('' + OperatorType.KEYWORD_DELETE):                 TokenType.DELETE,
            ('' + OperatorType.KEYWORD_IN):                     TokenType.IN
        };
        public static const SYMBOLS_MAPPING:Object = {
            ('' + SymbolType.COLON_SIGN):                       TokenType.COLON_SIGN,
            ('' + SymbolType.SEMICOLON_SIGN):                   TokenType.SEMICOLON_SIGN,
            ('' + SymbolType.COMMA_SIGN):                       TokenType.COMMA_SIGN,
            ('' + SymbolType.LT_ROUND_BRACKET):                 TokenType.LT_ROUND_BRACKET,
            ('' + SymbolType.RT_ROUND_BRACKET):                 TokenType.RT_ROUND_BRACKET,
            ('' + SymbolType.LT_SQUARE_BRACKET):                TokenType.LT_SQUARE_BRACKET,
            ('' + SymbolType.RT_SQUARE_BRACKET):                TokenType.RT_SQUARE_BRACKET,
            ('' + SymbolType.LT_CURLY_BRACKET):                 TokenType.LT_CURLY_BRACKET,
            ('' + SymbolType.RT_CURLY_BRACKET):                 TokenType.RT_CURLY_BRACKET,
            ('' + SymbolType.LT_ANGLE_BRACKET):                 TokenType.LT_ANGLE_BRACKET,
            ('' + SymbolType.RT_ANGLE_BRACKET):                 TokenType.RT_ANGLE_BRACKET
        };
    }
}
